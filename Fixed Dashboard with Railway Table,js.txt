/**
 * Railway Tables Diagnostic Script
 * This will help us diagnose exactly what's happening with the Railway API calls
 */

class RailwayDiagnostic {
  constructor() {
    this.apiBaseUrl = 'https://api-server-final-production.up.railway.app';
    this.results = {};
  }

  /**
   * Run complete diagnostic of all Railway tables
   */
  async runCompleteDiagnostic() {
    console.log('🔍 Starting Railway Tables Diagnostic...');
    console.log('━'.repeat(60));

    // Test each endpoint
    await this.testHealthEndpoint();
    await this.testTransactionsEndpoint();
    await this.testGP2024Endpoint();
    await this.testGP2025Endpoint();
    await this.testRecapEndpoint();
    await this.testKPIsEndpoint();

    // Summary
    this.printSummary();
    return this.results;
  }

  /**
   * Test health endpoint
   */
  async testHealthEndpoint() {
    console.log('🏥 Testing Health Endpoint...');
    try {
      const response = await fetch(`${this.apiBaseUrl}/health`);
      const text = await response.text();
      
      this.results.health = {
        status: response.status,
        ok: response.ok,
        response: text,
        timestamp: new Date().toISOString()
      };
      
      console.log(`   ✅ Health: ${response.status} - ${text}`);
    } catch (error) {
      this.results.health = { error: error.message };
      console.log(`   ❌ Health: ${error.message}`);
    }
  }

  /**
   * Test transactions endpoint
   */
  async testTransactionsEndpoint() {
    console.log('📊 Testing Transactions Endpoint...');
    try {
      const response = await fetch(`${this.apiBaseUrl}/api/transactions?limit=5`);
      const data = await response.json();
      
      this.results.transactions = {
        status: response.status,
        ok: response.ok,
        total: data.total,
        count: data.data?.length || 0,
        sampleRecord: data.data?.[0] || null,
        fields: data.data?.[0] ? Object.keys(data.data[0]) : []
      };
      
      console.log(`   ✅ Transactions: ${response.status} - ${data.data?.length || 0} records`);
      console.log(`   📋 Fields: ${this.results.transactions.fields.join(', ')}`);
      
      if (data.data?.[0]) {
        console.log(`   📄 Sample: ${JSON.stringify(data.data[0], null, 2).substring(0, 200)}...`);
      }
    } catch (error) {
      this.results.transactions = { error: error.message };
      console.log(`   ❌ Transactions: ${error.message}`);
    }
  }

  /**
   * Test GP 2024 endpoint
   */
  async testGP2024Endpoint() {
    console.log('📈 Testing GP 2024 Endpoint...');
    try {
      const response = await fetch(`${this.apiBaseUrl}/api/gp-data/2024?limit=5`);
      const data = await response.json();
      
      this.results.gp2024 = {
        status: response.status,
        ok: response.ok,
        total: data.total,
        count: data.data?.length || 0,
        sampleRecord: data.data?.[0] || null,
        fields: data.data?.[0] ? Object.keys(data.data[0]) : []
      };
      
      console.log(`   ✅ GP 2024: ${response.status} - ${data.data?.length || 0} records`);
      console.log(`   📋 Fields: ${this.results.gp2024.fields.join(', ')}`);
      
      if (data.data?.[0]) {
        console.log(`   📄 Sample: ${JSON.stringify(data.data[0], null, 2).substring(0, 200)}...`);
      }
    } catch (error) {
      this.results.gp2024 = { error: error.message };
      console.log(`   ❌ GP 2024: ${error.message}`);
    }
  }

  /**
   * Test GP 2025 endpoint
   */
  async testGP2025Endpoint() {
    console.log('📈 Testing GP 2025 Endpoint...');
    try {
      const response = await fetch(`${this.apiBaseUrl}/api/gp-data/2025?limit=5`);
      const data = await response.json();
      
      this.results.gp2025 = {
        status: response.status,
        ok: response.ok,
        total: data.total,
        count: data.data?.length || 0,
        sampleRecord: data.data?.[0] || null,
        fields: data.data?.[0] ? Object.keys(data.data[0]) : []
      };
      
      console.log(`   ✅ GP 2025: ${response.status} - ${data.data?.length || 0} records`);
      console.log(`   📋 Fields: ${this.results.gp2025.fields.join(', ')}`);
      
      if (data.data?.[0]) {
        console.log(`   📄 Sample: ${JSON.stringify(data.data[0], null, 2).substring(0, 200)}...`);
      }
    } catch (error) {
      this.results.gp2025 = { error: error.message };
      console.log(`   ❌ GP 2025: ${error.message}`);
    }
  }

  /**
   * Test recap endpoint
   */
  async testRecapEndpoint() {
    console.log('📋 Testing Recap Endpoint...');
    try {
      const response = await fetch(`${this.apiBaseUrl}/api/recap-data?limit=5`);
      const data = await response.json();
      
      this.results.recap = {
        status: response.status,
        ok: response.ok,
        total: data.total,
        count: data.data?.length || 0,
        sampleRecord: data.data?.[0] || null,
        fields: data.data?.[0] ? Object.keys(data.data[0]) : []
      };
      
      console.log(`   ✅ Recap: ${response.status} - ${data.data?.length || 0} records`);
      console.log(`   📋 Fields: ${this.results.recap.fields.join(', ')}`);
      
      if (data.data?.[0]) {
        console.log(`   📄 Sample: ${JSON.stringify(data.data[0], null, 2).substring(0, 200)}...`);
      }
    } catch (error) {
      this.results.recap = { error: error.message };
      console.log(`   ❌ Recap: ${error.message}`);
    }
  }

  /**
   * Test KPIs endpoint
   */
  async testKPIsEndpoint() {
    console.log('📊 Testing KPIs Endpoint...');
    try {
      const response = await fetch(`${this.apiBaseUrl}/api/kpis`);
      const data = await response.json();
      
      this.results.kpis = {
        status: response.status,
        ok: response.ok,
        data: data,
        fields: Object.keys(data)
      };
      
      console.log(`   ✅ KPIs: ${response.status}`);
      console.log(`   📊 KPIs: ${JSON.stringify(data, null, 2)}`);
    } catch (error) {
      this.results.kpis = { error: error.message };
      console.log(`   ❌ KPIs: ${error.message}`);
    }
  }

  /**
   * Print diagnostic summary
   */
  printSummary() {
    console.log('━'.repeat(60));
    console.log('📊 RAILWAY DIAGNOSTIC SUMMARY');
    console.log('━'.repeat(60));

    const endpoints = ['health', 'transactions', 'gp2024', 'gp2025', 'recap', 'kpis'];
    let workingCount = 0;
    let totalCount = endpoints.length;

    endpoints.forEach(endpoint => {
      const result = this.results[endpoint];
      if (result && !result.error && result.ok) {
        workingCount++;
        console.log(`✅ ${endpoint.toUpperCase()}: Working (${result.count || 'N/A'} records)`);
      } else {
        console.log(`❌ ${endpoint.toUpperCase()}: Failed - ${result?.error || 'Unknown error'}`);
      }
    });

    console.log('━'.repeat(60));
    console.log(`📈 HEALTH SCORE: ${workingCount}/${totalCount} endpoints working`);
    console.log('━'.repeat(60));

    // Specific issues and recommendations
    if (workingCount === totalCount) {
      console.log('🎉 ALL RAILWAY ENDPOINTS ARE WORKING!');
      console.log('   The issue is likely in data mapping or transformation.');
    } else {
      console.log('⚠️  SOME ENDPOINTS HAVE ISSUES:');
      endpoints.forEach(endpoint => {
        const result = this.results[endpoint];
        if (result && result.error) {
          console.log(`   • ${endpoint}: ${result.error}`);
        }
      });
    }

    // Data structure analysis
    console.log('\n🔍 DATA STRUCTURE ANALYSIS:');
    endpoints.forEach(endpoint => {
      const result = this.results[endpoint];
      if (result && result.fields && result.fields.length > 0) {
        console.log(`   ${endpoint}: [${result.fields.join(', ')}]`);
      }
    });
  }

  /**
   * Compare expected vs actual field names
   */
  analyzeFieldMapping() {
    console.log('\n🗂️  FIELD MAPPING ANALYSIS:');
    
    const expectedFields = {
      transactions: ['date', 'customer', 'product_type', 'gallon_qty', 'sales', 'actual_profit'],
      gp2024: ['date', 'chief_daily', 'chief_rolling', 'dooley_daily'],
      gp2025: ['date', 'chief_goal', 'chief_actual', 'tw_goal', 'tw_actual'],
      recap: ['date', 'driver', 'company', 'gallons', 'profit_includes_delivery_fee']
    };

    Object.keys(expectedFields).forEach(endpoint => {
      const expected = expectedFields[endpoint];
      const actual = this.results[endpoint]?.fields || [];
      
      console.log(`\n   ${endpoint.toUpperCase()}:`);
      console.log(`     Expected: [${expected.join(', ')}]`);
      console.log(`     Actual:   [${actual.join(', ')}]`);
      
      const missing = expected.filter(field => !actual.includes(field));
      const extra = actual.filter(field => !expected.includes(field));
      
      if (missing.length > 0) {
        console.log(`     Missing:  [${missing.join(', ')}]`);
      }
      if (extra.length > 0) {
        console.log(`     Extra:    [${extra.join(', ')}]`);
      }
    });
  }
}

// Make it available globally
window.RailwayDiagnostic = RailwayDiagnostic;

// Auto-run diagnostic when loaded
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(async () => {
    if (window.location.search.includes('diagnostic=true') || window.DEBUG) {
      const diagnostic = new RailwayDiagnostic();
      const results = await diagnostic.runCompleteDiagnostic();
      diagnostic.analyzeFieldMapping();
      
      // Store results globally for inspection
      window.railwayDiagnosticResults = results;
      
      console.log('\n💡 TIP: Run window.railwayDiagnosticResults to see full results');
      console.log('💡 TIP: Run new RailwayDiagnostic().runCompleteDiagnostic() to re-run');
    }
  }, 2000);
});

console.log('🔧 Railway Diagnostic loaded. Run "new RailwayDiagnostic().runCompleteDiagnostic()" to test all endpoints.');